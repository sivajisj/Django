# coding: utf-8

"""
    Leetcode API

    Leetcode API implementation.  # noqa: E501

    OpenAPI spec version: 1.0.1-1
    Contact: pv.safronov@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from __future__ import annotations

import pprint
import re  # noqa: F401

import six


class GraphqlQueryProblemsetQuestionListVariables(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "category_slug": "str",
        "limit": "int",
        "skip": "int",
        "filters": "GraphqlQueryProblemsetQuestionListVariablesFilterInput",
    }

    attribute_map = {
        "category_slug": "categorySlug",
        "limit": "limit",
        "skip": "skip",
        "filters": "filters",
    }

    def __init__(
        self, category_slug=None, limit=None, skip=None, filters=None
    ) -> None:  # noqa: E501
        """GraphqlQueryProblemsetQuestionListVariables - a model defined in Swagger"""  # noqa: E501
        self._category_slug = None
        self._limit = None
        self._skip = None
        self._filters = None
        self.discriminator = None
        if category_slug is not None:
            self.category_slug = category_slug
        if limit is not None:
            self.limit = limit
        if skip is not None:
            self.skip = skip
        if filters is not None:
            self.filters = filters

    @property
    def category_slug(self):
        """Gets the category_slug of this GraphqlQueryProblemsetQuestionListVariables.  # noqa: E501


        :return: The category_slug of this GraphqlQueryProblemsetQuestionListVariables.  # noqa: E501
        :rtype: str
        """
        return self._category_slug

    @category_slug.setter
    def category_slug(self, category_slug):
        """Sets the category_slug of this GraphqlQueryProblemsetQuestionListVariables.


        :param category_slug: The category_slug of this GraphqlQueryProblemsetQuestionListVariables.  # noqa: E501
        :type: str
        """

        self._category_slug = category_slug

    @property
    def limit(self):
        """Gets the limit of this GraphqlQueryProblemsetQuestionListVariables.  # noqa: E501


        :return: The limit of this GraphqlQueryProblemsetQuestionListVariables.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GraphqlQueryProblemsetQuestionListVariables.


        :param limit: The limit of this GraphqlQueryProblemsetQuestionListVariables.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def skip(self):
        """Gets the skip of this GraphqlQueryProblemsetQuestionListVariables.  # noqa: E501


        :return: The skip of this GraphqlQueryProblemsetQuestionListVariables.  # noqa: E501
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this GraphqlQueryProblemsetQuestionListVariables.


        :param skip: The skip of this GraphqlQueryProblemsetQuestionListVariables.  # noqa: E501
        :type: int
        """

        self._skip = skip

    @property
    def filters(self):
        """Gets the filters of this GraphqlQueryProblemsetQuestionListVariables.  # noqa: E501


        :return: The filters of this GraphqlQueryProblemsetQuestionListVariables.  # noqa: E501
        :rtype: GraphqlQueryProblemsetQuestionListVariablesFilterInput
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this GraphqlQueryProblemsetQuestionListVariables.


        :param filters: The filters of this GraphqlQueryProblemsetQuestionListVariables.  # noqa: E501
        :type: GraphqlQueryProblemsetQuestionListVariablesFilterInput
        """

        self._filters = filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(GraphqlQueryProblemsetQuestionListVariables, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: GraphqlQueryProblemsetQuestionListVariables) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, GraphqlQueryProblemsetQuestionListVariables):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
