# coding: utf-8

"""
    Leetcode API

    Leetcode API implementation.  # noqa: E501

    OpenAPI spec version: 1.0.1-1
    Contact: pv.safronov@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from __future__ import annotations

import pprint
import re  # noqa: F401

import six


class GraphqlQueryProblemsetQuestionListVariablesFilterInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "tags": "list[str]",
        "difficulty": "str",
        "status": "str",
        "list_id": "str",
        "premium_only": "bool",
    }

    attribute_map = {
        "tags": "tags",
        "difficulty": "difficulty",
        "status": "status",
        "list_id": "listId",
        "premium_only": "premiumOnly",
    }

    def __init__(
        self, tags=None, difficulty=None, status=None, list_id=None, premium_only=None
    ) -> None:  # noqa: E501
        """GraphqlQueryProblemsetQuestionListVariablesFilterInput - a model defined in Swagger"""  # noqa: E501
        self._tags = None
        self._difficulty = None
        self._status = None
        self._list_id = None
        self._premium_only = None
        self.discriminator = None
        if tags is not None:
            self.tags = tags
        if difficulty is not None:
            self.difficulty = difficulty
        if status is not None:
            self.status = status
        if list_id is not None:
            self.list_id = list_id
        if premium_only is not None:
            self.premium_only = premium_only

    @property
    def tags(self):
        """Gets the tags of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501


        :return: The tags of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.


        :param tags: The tags of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def difficulty(self):
        """Gets the difficulty of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501


        :return: The difficulty of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501
        :rtype: str
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """Sets the difficulty of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.


        :param difficulty: The difficulty of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501
        :type: str
        """

        self._difficulty = difficulty

    @property
    def status(self):
        """Gets the status of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501


        :return: The status of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.


        :param status: The status of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def list_id(self):
        """Gets the list_id of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501


        :return: The list_id of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501
        :rtype: str
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.


        :param list_id: The list_id of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501
        :type: str
        """

        self._list_id = list_id

    @property
    def premium_only(self):
        """Gets the premium_only of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501


        :return: The premium_only of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501
        :rtype: bool
        """
        return self._premium_only

    @premium_only.setter
    def premium_only(self, premium_only):
        """Sets the premium_only of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.


        :param premium_only: The premium_only of this GraphqlQueryProblemsetQuestionListVariablesFilterInput.  # noqa: E501
        :type: bool
        """

        self._premium_only = premium_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(GraphqlQueryProblemsetQuestionListVariablesFilterInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(
        self, other: GraphqlQueryProblemsetQuestionListVariablesFilterInput
    ) -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(
            other, GraphqlQueryProblemsetQuestionListVariablesFilterInput
        ):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other) -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
