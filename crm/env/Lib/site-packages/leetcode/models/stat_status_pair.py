# coding: utf-8

"""
    Leetcode API

    Leetcode API implementation.  # noqa: E501

    OpenAPI spec version: 1.0.1-1
    Contact: pv.safronov@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class StatStatusPair(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "stat": "Stat",
        "status": "str",
        "difficulty": "Difficulty",
        "paid_only": "bool",
        "is_favor": "bool",
        "frequency": "float",
        "progress": "float",
    }

    attribute_map = {
        "stat": "stat",
        "status": "status",
        "difficulty": "difficulty",
        "paid_only": "paid_only",
        "is_favor": "is_favor",
        "frequency": "frequency",
        "progress": "progress",
    }

    def __init__(
        self,
        stat=None,
        status=None,
        difficulty=None,
        paid_only=None,
        is_favor=None,
        frequency=None,
        progress=None,
    ):  # noqa: E501
        """StatStatusPair - a model defined in Swagger"""  # noqa: E501
        self._stat = None
        self._status = None
        self._difficulty = None
        self._paid_only = None
        self._is_favor = None
        self._frequency = None
        self._progress = None
        self.discriminator = None
        self.stat = stat
        if status is not None:
            self.status = status
        self.difficulty = difficulty
        self.paid_only = paid_only
        self.is_favor = is_favor
        self.frequency = frequency
        self.progress = progress

    @property
    def stat(self):
        """Gets the stat of this StatStatusPair.  # noqa: E501


        :return: The stat of this StatStatusPair.  # noqa: E501
        :rtype: Stat
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this StatStatusPair.


        :param stat: The stat of this StatStatusPair.  # noqa: E501
        :type: Stat
        """
        if stat is None:
            raise ValueError(
                "Invalid value for `stat`, must not be `None`"
            )  # noqa: E501

        self._stat = stat

    @property
    def status(self):
        """Gets the status of this StatStatusPair.  # noqa: E501


        :return: The status of this StatStatusPair.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatStatusPair.


        :param status: The status of this StatStatusPair.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def difficulty(self):
        """Gets the difficulty of this StatStatusPair.  # noqa: E501


        :return: The difficulty of this StatStatusPair.  # noqa: E501
        :rtype: Difficulty
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """Sets the difficulty of this StatStatusPair.


        :param difficulty: The difficulty of this StatStatusPair.  # noqa: E501
        :type: Difficulty
        """
        if difficulty is None:
            raise ValueError(
                "Invalid value for `difficulty`, must not be `None`"
            )  # noqa: E501

        self._difficulty = difficulty

    @property
    def paid_only(self):
        """Gets the paid_only of this StatStatusPair.  # noqa: E501


        :return: The paid_only of this StatStatusPair.  # noqa: E501
        :rtype: bool
        """
        return self._paid_only

    @paid_only.setter
    def paid_only(self, paid_only):
        """Sets the paid_only of this StatStatusPair.


        :param paid_only: The paid_only of this StatStatusPair.  # noqa: E501
        :type: bool
        """
        if paid_only is None:
            raise ValueError(
                "Invalid value for `paid_only`, must not be `None`"
            )  # noqa: E501

        self._paid_only = paid_only

    @property
    def is_favor(self):
        """Gets the is_favor of this StatStatusPair.  # noqa: E501


        :return: The is_favor of this StatStatusPair.  # noqa: E501
        :rtype: bool
        """
        return self._is_favor

    @is_favor.setter
    def is_favor(self, is_favor):
        """Sets the is_favor of this StatStatusPair.


        :param is_favor: The is_favor of this StatStatusPair.  # noqa: E501
        :type: bool
        """
        if is_favor is None:
            raise ValueError(
                "Invalid value for `is_favor`, must not be `None`"
            )  # noqa: E501

        self._is_favor = is_favor

    @property
    def frequency(self):
        """Gets the frequency of this StatStatusPair.  # noqa: E501


        :return: The frequency of this StatStatusPair.  # noqa: E501
        :rtype: float
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this StatStatusPair.


        :param frequency: The frequency of this StatStatusPair.  # noqa: E501
        :type: float
        """
        if frequency is None:
            raise ValueError(
                "Invalid value for `frequency`, must not be `None`"
            )  # noqa: E501

        self._frequency = frequency

    @property
    def progress(self):
        """Gets the progress of this StatStatusPair.  # noqa: E501


        :return: The progress of this StatStatusPair.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this StatStatusPair.


        :param progress: The progress of this StatStatusPair.  # noqa: E501
        :type: float
        """
        if progress is None:
            raise ValueError(
                "Invalid value for `progress`, must not be `None`"
            )  # noqa: E501

        self._progress = progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(StatStatusPair, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatStatusPair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
